# SUSE's openQA tests
#
# Copyright SUSE LLC
# SPDX-License-Identifier: FSFAP
# Maintainer: QE-SAP <qe-sap@suse.de>

package sles4sap::sap_deployment_automation_framework::configure_sap_systems_tfvars;

use strict;
use warnings;
use testapi;
use Exporter qw(import);
use Carp qw(croak);
use utils qw(write_sut_file);
use sles4sap::sap_deployment_automation_framework::deployment
  qw(get_os_variable validate_components get_fencing_mechanism);
use sles4sap::sap_deployment_automation_framework::configure_workload_tfvars qw(write_tfvars_file);
use sles4sap::sap_deployment_automation_framework::naming_conventions
  qw(generate_resource_group_name get_sizing_filename);
use sles4sap::sap_deployment_automation_framework::deployment_connector qw(no_cleanup_tag);

=head1 SYNOPSIS

Library with common functions for Microsoft SDAF deployment automation that help with preparation of
'SAP-SYSTEMS' tfvars file.
File is generated according to example template:
https://github.com/Azure/SAP-automation-samples/blob/main/Terraform/WORKSPACES/SYSTEM/LAB-SECE-SAP04-L00/LAB-SECE-SAP04-L00.tfvars

=cut

our @EXPORT = qw(
  create_sap_systems_tfvars
);

=head2 create_sap_systems_tfvars

    create_sap_systems_tfvars(workload_vnet_code=>'SAP04', os_image=>$os_img [, av_zones=>'true']);

Creates data structure with content of sap systems tfvars file according to provided arguments and required OpenQA
settings. Data structure converted into tfvars format is written into target file.

=over

=item * B<av_zones>: Define if availability zones should be used. Default: true

=item * B<workload_vnet_code>: Workload zone VNET code.

=back

=cut

sub create_sap_systems_tfvars {
    my (%args) = @_;
    # use AV zones by default
    $args{av_zones} //= 'true';
    my $sap_sid = get_required_var('SAP_SID');
    # Use full ENSA2 mounts by default. Simple mount does not cover FS failover.
    my $use_simple_mount = get_var('SDAF_SIMPLE_MOUNT', 'false');

    croak 'Missing mandatory argument "$args{workload_vnet_code}"' unless $args{workload_vnet_code};
    croak "OpenQA setting 'SDAF_SIMPLE_MOUNT' must be true or false. Got: $use_simple_mount"
      unless $use_simple_mount =~ /true|false/;

    # Keep deployment scenario mandatory without defaults to keep setting consistent across all test modules
    my @components = split(',', get_required_var('SDAF_DEPLOYMENT_SCENARIO'));
    validate_components(components => \@components);

    my $hana_ha = grep(/db_ha/, @components) ? 'true' : 'false';
    my $ensa2_ha = grep(/nw_ensa/, @components) ? 'true' : 'false';
    my $app_deployment = grep(/ensa|pas|aas|scs/, @components) ? 'true' : 'false';
    my $app_server_count = grep(/pas/, @components) + grep(/aas/, @components);
    my $scs_server_count = $app_deployment eq 'true' ? '1' : '0';

    my %tfvars_data;
    $tfvars_data{file_header} = "### File was generated by OpenQA automation according to template:\n### https://github.com/Azure/SAP-automation-samples/blob/main/Terraform/WORKSPACES/SYSTEM/LAB-SECE-SAP04-L00/LAB-SECE-SAP04-L00.tfvars\n";
    $tfvars_data{env_definitions} = define_sap_systems_environment(
        environment => get_required_var('SDAF_ENV_CODE'),
        location => get_required_var('PUBLIC_CLOUD_REGION'),
        resource_group => generate_resource_group_name(deployment_type => 'sap_system'),
        bom_name => get_required_var('SDAF_BOM_NAME')
    );
    $tfvars_data{sap_systems_networking} = define_networking(workload_vnet_code => $args{workload_vnet_code});
    $tfvars_data{cluster_settings} = define_cluster_settings(use_simple_mount => $use_simple_mount);
    $tfvars_data{database_tier} = define_database_tier(high_availability => $hana_ha, av_zones => $args{av_zones});
    $tfvars_data{application_tier} = define_application_tier(sap_sid => $sap_sid,
        enable_app_tier_deployment => $app_deployment);
    $tfvars_data{sap_central_services} = define_sap_central_services(
        scs_high_availability => $ensa2_ha, scs_server_count => $scs_server_count, sap_sid => $sap_sid);
    $tfvars_data{application_servers} = define_application_servers(
        app_server_count => $app_server_count, sap_sid => $sap_sid);
    $tfvars_data{miscellaneous_settings} = define_miscellaneous_settings();
    $tfvars_data{nfs_support} = define_nfs_settings();
    $tfvars_data{vm_images} = define_vm_images(os_image => $args{os_image});

    my $tfvars_file = get_os_variable('sap_system_parameter_file');
    write_tfvars_file(tfvars_data => \%tfvars_data, tfvars_file => $tfvars_file);
    upload_logs($tfvars_file, log_name => 'sap_systems.tfvars.txt');
}

=head2 define_workload_environment

    define_workload_environment(environment=>'LAB', location=>'swedencentral');

Returns tfvars environment definitions section in HASHREF format.
Example: {environment : '"LAB"', location : '"swedencentral"'}
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<environment>: SDAF environment

=item * B<location>: Public cloud location

=back

=cut

sub define_sap_systems_environment {
    my (%args) = @_;
    for my $arg ('environment', 'location', 'resource_group', 'bom_name') {
        croak "Missing mandatory argument \$args{$arg}" unless $args{$arg};
    }

    my %result = (
        header => q|### Environment definitions ###|,
        resourcegroup_name => qq|"$args{resource_group}"|,
        custom_disk_sizes_filename => '"' . get_sizing_filename() . '"',
        environment => qq|"$args{environment}"|,
        location => qq|"$args{location}"|,
        # upgrade_packages defines if all packages should be upgraded after installation
        upgrade_packages => q|true|,
        bom_name => qq|"$args{bom_name}"|,
        enable_purge_control_for_keyvaults => 'false',
        use_spn => q|true|,
        tags => q|{"DeployedBy" = "OpenQA-SDAF-automation"}|
    );

    # Add no cleanup tag if the deployment should be kept after test finished
    $result{tags} = q|{"DeployedBy" = "OpenQA-SDAF-automation", "| . no_cleanup_tag() . q|" = "1"}|
      if get_var('SDAF_RETAIN_DEPLOYMENT');

    return (\%result);
}

=head2 define_networking

    define_networking(workload_vnet_code=>'SAP04');

Returns tfvars networking definitions section in HASHREF format.
B<Example:> {network_logical_name : '"VNET01"', use_private_endpoint : 'true' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<workload_vnet_code>: Workload zone VNET code.

=back

=cut

sub define_networking {
    my (%args) = @_;
    croak 'Missing mandatory argument $args{workload_vnet_code}' unless $args{workload_vnet_code};
    my %result = (
        header => q|### Define SAP systems networking ###|,
        # The network logical name is mandatory - it is used in the naming convention and should map to the workload virtual network logical name
        network_logical_name => qq|"$args{workload_vnet_code}"|,
        # use_loadbalancers_for_standalone_deployments is a boolean flag that can be used to control if standalone deployments (non HA) will have load balancers
        use_loadbalancers_for_standalone_deployments => 'false',
        # use_private_endpoint is a boolean flag controlling if the key vaults and storage accounts have private endpoints
        use_private_endpoint => 'true'
    );
    return (\%result);
}

=head2 define_cluster_settings

    define_cluster_settings();

Returns tfvars cluster definitions section in HASHREF format.
B<Example:> {scs_cluster_type : '"AFA"', use_msi_for_clusters : 'true' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<use_simple_mount>: Use simple mount setup without FS failover.

=back

=cut

sub define_cluster_settings {
    my (%args) = @_;
    # Convert OpenQA setting "SDAF_FENCING_MECHANISM" to value accepted by SDAF
    my $fencing_type = get_fencing_mechanism();
    my %result = (
        header => q|### Cluster settings ###|,
        scs_cluster_type => qq|"$fencing_type"|,
        database_cluster_type => qq|"$fencing_type"|,
        use_msi_for_clusters => 'true',
        use_simple_mount => $args{use_simple_mount}
    );
    return (\%result);
}

=head2 define_database_tier

    define_database_tier(high_availability=>'true', av_zones=>'false');

Returns tfvars database tier definitions section in HASHREF format.
B<Example:> {database_high_availability : 'true', database_use_avset : 'true' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<high_availability>: Enable database high availability deployment.

=item * B<av_zones>: Define if availability zones should be used.

=back


=cut

sub define_database_tier {
    my (%args) = @_;
    for my $variable ('high_availability', 'av_zones') {
        croak "Argument '\$args{$variable}' must be either 'true' or 'false'. Got: '$args{$variable}'"
          unless grep /^$args{$variable}$/, ('true', 'false');
    }

    my %result = (
        header => q|### Database tier ###|,
        database_sid => q|"HDB"|,
        # Defines database type (HANA, DB2, ORACLE, ORACLE-ASM, SYBASE, SQLSERVER, NONE)
        database_platform => q|"HANA"|,
        # Defines the number of database servers
        # In case of High Availability, this should still be set to 1 in combination with `database_high_availability`
        database_server_count => '1',
        # Enable HanaSR setup
        database_high_availability => $args{high_availability},
        # Custom disk sizing file located in '/data/sles4sap/sap_deployment_automation_framework/*.json'
        database_size => q|"Custom"|,
        # Hana DB instance number
        database_instance_number => q|"00"|,
        # Controls if IP addresses should be provided by Azure subnet
        database_vm_use_DHCP => 'true',
        # AV zone definitions
        database_vm_zones => q|["1", "2", "3"]|,
        # Define if DB VMs will be placed in Availability zones
        database_use_avset => qq|"$args{av_zones}"|,
        # Use proximity placement groups
        database_use_ppg => 'false',
        use_app_proximityplacementgroups => 'false'
    );
    return (\%result);
}


=head2 define_application_tier

    define_application_tier(enable_app_tier_deployment=>'true', sap_sid=>'ABC');

Returns tfvars database tier definitions section in HASHREF format.
B<Example:> {enable_app_tier_deployment : 'true', sid : '"P00"' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<enable_app_tier_deployment>: Enable deployment of Netweaver stack.

=item * B<sap_sid>: Define Netweaver SAP system id.

=back
=cut

sub define_application_tier {
    my (%args) = @_;
    # Do not deploy NW by default
    $args{enable_app_tier_deployment} //= 'false';
    croak 'Missing mandatory argument $args{sap_sid}'
      unless $args{sap_sid} || $args{enable_app_tier_deployment} eq 'false';

    my %result = (
        header => '### Application tier ###',
        enable_app_tier_deployment => $args{enable_app_tier_deployment},
        sid => qq|"$args{sap_sid}"|,
        app_tier_use_DHCP => 'true'
    );
    # Add APP deployment options if enabled
    if ($args{enable_app_tier_deployment} eq 'true') {
        $result{app_tier_sizing_dictionary_key} = q|"Custom"|;
    }

    return (\%result);
}


=head2 define_sap_central_services

    define_sap_central_services(scs_server_count=>'1', sap_sid=>'ABC', high_availability=>'true');

Returns tfvars sap central services definitions section in HASHREF format.
B<Example:> {scs_server_count : '1', scs_server_use_ppg : 'true' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<scs_server_count>: Number of ASCS servers.

=item * B<sap_sid>: Define Netweaver SAP system id.

=item * B<high_availability>: Enable database high availability deployment.

=back
=cut

sub define_sap_central_services {
    my (%args) = @_;
    my %result = (
        header => q|### SAP Central Services ###|,
        scs_server_count => $args{scs_server_count},
        scs_server_use_ppg => 'true',
        scs_server_zones => q|["1", "2", "3"]|,
        scs_server_use_avset => 'false',
        scs_instance_number => q|"01"|,
        ers_instance_number => q|"02"|
    );

    # 'scs_high_availability' setting triggers ERS/ENSA2 deployment
    $result{scs_high_availability} = $args{scs_high_availability} if int($args{scs_server_count}) > 0;
    return (\%result);
}

=head2 define_application_servers

    define_application_servers(app_server_count=>'3');

Returns tfvars sap application server definitions section in HASHREF format.
B<Example:> {scs_server_count : '1', scs_server_use_ppg : 'true' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<app_server_count>: Number of application servers. Value '1' will deploy only PAS, anything above will deploy
    additional app servers.

=back
=cut

sub define_application_servers {
    my (%args) = @_;
    my %result = (
        header => q|### Application Servers ###|,
        application_server_count => qq|"$args{app_server_count}"|,
        application_server_use_ppg => 'true',
        application_server_use_avset => 'false'
    );

    # Add PAS/AAS deployment options if enabled
    if ($args{app_server_count} >= 1) {
        $result{pas_instance_number} = q|"03"|;
        $result{app_tier_dual_nics} = 'false';
        $result{application_server_zones} = q|["1", "2", "3"]|;
    }
    return (\%result);
}

=head2 define_miscellaneous_settings

    define_miscellaneous_settings();

Returns tfvars miscellaneous settings section in HASHREF format.
B<Example:> {resource_offset : '1', deploy_application_security_groups : 'true' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=cut

sub define_miscellaneous_settings {

    my %result = (
        header => q|### Miscellaneous settings ###|,
        resource_offset => q|1|,
        deploy_application_security_groups => 'true',
        deploy_v1_monitoring_extension => 'true',
        dns_a_records_for_secondary_names => 'true',
        # We do not use WD in scenarios
        webdispatcher_server_count => q|0|
    );

    return (\%result);
}

=head2 define_nfs_settings

    define_nfs_settings();

Returns tfvars NFS related setting section in HASHREF format. NFS storage is used to distribute installation media across
all nodes. NFS storage is served by Hana DB node in case only database is installed, otherwise it is ASCS node that
serves media.
B<Example:> {NFS_provider : '"AFS"', ANF_HANA_use_AVG : 'false' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=cut

sub define_nfs_settings {

    my %result = (
        header => q|### NFS support ###|,
        NFS_provider => q|"AFS"|,
        sapmnt_volume_size => q|128|,
        use_random_id_for_storageaccounts => 'true',
        ANF_HANA_use_AVG => 'false'
    );

    return (\%result);
}

=head2 define_vm_images

    define_vm_images(os_image=>'suse:sles-sap-15-sp5:gen2:latest');

VM OS image tfvars setting definition. Currently all VMs use the same OS image. Both BYOS and PAYG images can be used.
B<Example:> {source_image_id : '"suse:sles-sap-15-sp5:gen2:latest"', publisher : '"SUSE"' ... }
Pay attention to double quoting strings. They are very important in resulting file.

=over

=item * B<os_image>: BYOS or PAYG image ID.

=back

=cut

sub define_vm_images {
    my (%args) = @_;
    croak 'Missing mandatory argument $args{os_image}' unless $args{os_image};
    my $type;
    my $publisher;
    my $offer;
    my $sku;
    my $version;

    # This regex targets the general Azure Gallery image naming patterns,
    # excluding part of the name that are related to PC library.
    if ($args{os_image} =~ /^\/subscriptions\/.*\/galleries\/.*/) {
        $type = 'custom';
        ($publisher, $offer, $sku, $version) = '';    # Those can't be undef
    }
    else {
        # Parse image ID supplied by OpenQA parameter 'PUBLIC_CLOUD_IMAGE_ID'
        ($publisher, $offer, $sku, $version) = split(':', $args{os_image});
        $type = 'marketplace';
    }

    my %result = (
        header => '### VM images ###'
    );
    for my $component ('database_vm_image', 'scs_server_image', 'application_server_image') {
        $result{$component} = <<"END";
{ os_type = "LINUX",
  source_image_id = "$args{os_image}",
  publisher = "$publisher",
  offer = "$offer",
  sku = "$sku",
  version = "$version",
  type = "$type"
}
END
    }

    return (\%result);
}
