# Copyright SUSE LLC
# SPDX-License-Identifier: GPL-2.0-or-Later
#
# Summary: Verify the "aureport" utility can generate default audit report and reports with specifc parameters
# Maintainer: QE Security <none@suse.de>
# Tags: poo#81772, tc#1768552

use base 'opensusebasetest';
use testapi;
use utils;
use version_utils 'is_sle';

sub run {
    my $audit_log = '/var/log/audit/audit.log';

    select_console 'root-console';

    # Make sure audit service is started
    assert_script_run('systemctl is-active auditd');

    # Generate audit records for testing
    assert_script_run("echo '' > $audit_log");

    # Check if the SUT has apparmor and restart it
    # If apparmor is available, the return value is 0
    if (script_run('systemctl status apparmor | grep "Active: active"') == 0) {
        assert_script_run('systemctl restart apparmor');
    } else {
        # SELinux; let's generate logs with runcon
        script_run('runcon -u system_u -r system_r -t health_checker_plugin_t ls');
        script_run('runcon -u system_u -r system_r -t apcupsd_t ls');
    }

    # Stop auditd before checking records in case the following executions
    # will generate new audit records
    assert_script_run('systemctl stop auditd');

    # Generate report by default
    assert_script_run('aureport');

    # Generate AVC report
    validate_script_output('aureport -a', sub { m/AVC/ });

    # Compare number of AVC reports is the same as it is shown in default report
    my $default_num = script_output("aureport | grep 'AVC' | cut -d ' ' -f 4");
    my $tmp_output = '/tmp/output';
    my $tmp_backup = '/tmp/backup';

    assert_script_run("aureport -a > $tmp_output");
    assert_script_run("tail -1 $tmp_output > $tmp_backup");

    my $avc_num = script_output("cat $tmp_backup | cut -d '.' -f 1");

    ($default_num == $avc_num)
      ? record_info('Comparison passed: ', 'AVC reports counted in default report is the same as generated by AVC reports')
      : record_info('Error: ', 'AVC reports counted in default report do not match the counts in AVC reports', result => 'fail');

    my $report_log = '/tmp/aureport.txt';

    # Generate report about users
    if (is_sle('=15-SP2')) {
        # There may be no users to list on 15-SP2, and in this case the command returns 1
        # even though it actually was successfully executed.
        script_run("echo '' > $report_log");
        script_run("aureport -u > $report_log");
        validate_script_output("cat $report_log", sub { m/User ID/ });
    } else {
        validate_script_output('aureport -u', sub { m/User ID/ });
    }

    # Generate report about processes
    validate_script_output('aureport -p', sub { m/Process ID/ });

    # Generate report about executable
    if (is_sle('=15-SP2')) {
        # There may be no users to list on 15-SP2, and in this case the command returns 1
        # even though it actually was successfully executed.
        script_run("echo '' > $report_log");
        script_run("aureport -x > $report_log");
        validate_script_output("cat $report_log", sub { m/Executable/ });
    } else {
        validate_script_output('aureport -x', sub { m/Executable/ });
    }

    # Generate report about terminal
    if (is_sle('=15-SP2')) {
        # There may be no users to list on 15-SP2, and in this case the command returns 1
        # even though it actually was successfully executed.
        script_run("echo '' > $report_log");
        script_run("aureport -tm > $report_log");
        validate_script_output("cat $report_log", sub { m/Terminal/ });
    } else {
        validate_script_output('aureport -tm', sub { m/Terminal/ });
    }

    # Generate report about long time range
    validate_script_output('aureport -t', sub { m/Log Time Range/ });

    # Generate report about commands run
    validate_script_output('aureport --comm', sub { m/Command/ });
}

1;
