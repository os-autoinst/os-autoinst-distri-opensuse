<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <suse_register>
    % if ($check_var->('SCC_REGISTER', 'installation') or $check_var->('REGISTER', 'installation')) {
    <do_registration config:type="boolean">true</do_registration>
    % } else {
    <do_registration config:type="boolean">false</do_registration>
    % }	
    <reg_server><%= defined $bmwqemu::vars{"HOST_SCC_URL"} ? $bmwqemu::vars{"HOST_SCC_URL"} : "" %></reg_server>
    <reg_code>{{SCC_REGCODE}}</reg_code>
    <install_updates config:type="boolean">true</install_updates>
    % if (keys %$addons) {
    <addons config:type="list">
      % while (my ($key, $addon) = each (%$addons)) {
      <addon>
        <name><%= $addon->{name} %></name>
        <version><%= $addon->{version} %></version>
        <arch><%= $addon->{arch} %></arch>
        % if ($key eq 'we' and $check_var->('SLE_PRODUCT', 'sles')) {
        <reg_code><%= $get_var->('SCC_REGCODE_WE') %></reg_code>
        % }
        % if ($key eq 'we' and $check_var->('SLE_PRODUCT', 'sled')) {
        <reg_code><%= $get_var->('SCC_REGCODE') %></reg_code>
        % }
        % if ($key eq 'rt') {
        <reg_code><%= $get_var->('SCC_REGCODE_RT') %></reg_code>
        % }
        % if ($key eq 'ltss') {
        <reg_code><%= $get_var->('SCC_REGCODE_LTSS') %></reg_code>
        % }
        <release_type/>
      </addon>
      % }
    </addons>
    %}
  </suse_register>
  <add-on>
    <add_on_products config:type="list">
      % my $n =0;
      % for my $repo (@$repos) {
      <listentry>
        <media_url><%= $repo %></media_url>
	<alias>TEST_<%= $n++ %></alias>
      </listentry>
      % }
    </add_on_products>
  </add-on>
  <bootloader>
    <global>
      <activate>true</activate>
      <gfxmode>auto</gfxmode>
      <hiddenmenu>false</hiddenmenu>
      <os_prober>false</os_prober>
      <secure_boot>false</secure_boot>
      % if ($check_var->('IPXE_UEFI', '1')) {
      <update_nvram>true</update_nvram>
      % }
      <serial>serial --speed=115200 --unit=<%= $get_var->('SERIALDEV', 'ttyS1') =~ s/ttyS//r %> --word=8 --parity=no --stop=1</serial>
      <timeout config:type="integer">15</timeout>
      <trusted_grub>false</trusted_grub>
      <terminal>console</terminal>
      % if ($check_var->('SYSTEM_ROLE', 'xen')) {
      <xen_append>splash=silent quiet console=tty <%= defined $bmwqemu::vars{"ENABLE_CONSOLE_KERNEL_LOG"} ? "loglvl=all guest_loglvl=all" : "loglvl=debug guest_loglvl=debug" %> <%= $get_var->('OPT_KERNEL_PARAMS') %></xen_append>
      <!-- For some special beremetal machines, such as unreal2/3, their serial console:
      SERIALDEV='ttyS2', XEN_SERIAL_CONSOLE="com1=115200,8n1,0x3e8,5 console=com1" -->
      <xen_kernel_append><%= defined $bmwqemu::vars{"XEN_SERIAL_CONSOLE"} ? $bmwqemu::vars{"XEN_SERIAL_CONSOLE"} : "console=com2,115200" %> vga=gfx-1024x768x16 <%= defined $bmwqemu::vars{"ENABLE_CONSOLE_KERNEL_LOG"} ? "loglvl=all guest_loglvl=all" : "loglvl=debug guest_loglvl=debug" %> sync_console</xen_kernel_append>
      % }
      % if ($check_var->('SYSTEM_ROLE', 'kvm')) {
        % if ($check_var->('AMD', '1')) {
          % if ($check_var->('VIRT_SEV_ES_GUEST_INSTALL', '1')) {
            <!-- Do not add mem_encrypt=on on kernel command line for amd-zen3-gpu-sut1 which is the only machine affected by bsc#1224107 -->
            % if ($get_var->('WORKER_CLASS', 'EMPTY_WORKER_CLASS') =~ /amd-zen3-gpu-sut1/) { 
      <append>splash=silent console=<%= $get_var->('SERIALDEV', 'ttyS1') %>,115200 console=tty kvm_amd.sev=1 <%= defined $bmwqemu::vars{"ENABLE_CONSOLE_KERNEL_LOG"} ? "ignore_loglevel" : "loglevel=5" %> <%= $get_var->('OPT_KERNEL_PARAMS', '') %></append>
            % } else {
      <append>splash=silent console=<%= $get_var->('SERIALDEV', 'ttyS1') %>,115200 console=tty mem_encrypt=on kvm_amd.sev=1 <%= defined $bmwqemu::vars{"ENABLE_CONSOLE_KERNEL_LOG"} ? "ignore_loglevel" : "loglevel=5" %> <%= $get_var->('OPT_KERNEL_PARAMS', '') %></append>
            % }
          % } else {
      <append>splash=silent console=<%= $get_var->('SERIALDEV', 'ttyS1') %>,115200 console=tty <%= defined $bmwqemu::vars{"ENABLE_CONSOLE_KERNEL_LOG"} ? "ignore_loglevel" : "loglevel=5" %> <%= $get_var->('OPT_KERNEL_PARAMS', '') %></append>
          % }
        % } else { 
      <append>splash=silent console=<%= $get_var->('SERIALDEV', 'ttyS1') %>,115200 console=tty intel_iommu=on <%= defined $bmwqemu::vars{"ENABLE_CONSOLE_KERNEL_LOG"} ? "ignore_loglevel" : "loglevel=5" %> <%= $get_var->('OPT_KERNEL_PARAMS', '') %></append>
        % }
      % }
    </global>
    <loader_type>default</loader_type>
  </bootloader>
  <general>
    <ask-list config:type="list"/>
    <mode>
      <confirm config:type="boolean">false</confirm>
      <final_reboot config:type="boolean">true</final_reboot>
    </mode>
    <proposals config:type="list"/>
    <signature-handling>
      <accept_file_without_checksum config:type="boolean">true</accept_file_without_checksum>
      <accept_non_trusted_gpg_key config:type="boolean">true</accept_non_trusted_gpg_key>
      <accept_unknown_gpg_key config:type="boolean">true</accept_unknown_gpg_key>
      <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
      <accept_verification_failed config:type="boolean">true</accept_verification_failed>
      <import_gpg_key config:type="boolean">true</import_gpg_key>
    </signature-handling>
    <storage>
      <start_multipath config:type="boolean">false</start_multipath>
    </storage>
  </general>
  <kdump>
    <add_crash_kernel config:type="boolean">true</add_crash_kernel>
    <crash_kernel>201M,high</crash_kernel>
    <crash_xen_kernel>201M\&lt;4G</crash_xen_kernel>
  </kdump>
  <keyboard>
    <keymap>english-us</keymap>
  </keyboard>
  <language>
    <language>en_US</language>
    <languages/>
  </language>
  <login_settings/>
  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <backend>wicked</backend>
    <virt_bridge_proposal config:type="boolean">true</virt_bridge_proposal>
  </networking>
  <ntp-client>
    <ntp_policy>auto</ntp_policy>
    <ntp_servers config:type="list">
      <ntp_server>
        <address>europe.pool.ntp.org</address>
        <iburst config:type="boolean">true</iburst>
        <offline config:type="boolean">false</offline>
      </ntp_server>
    </ntp_servers>
    <ntp_sync>systemd</ntp_sync>
  </ntp-client>
  <partitioning config:type="list">
  % my $wwn = {'quinn' => 'wwn-0x5000c50099db2117', 'kermit-1' => 'wwn-0x500a075119406ab6', 'gonzo-1' => 'wwn-0x500a075119406aa6', 'fozzie' => 'wwn-0x55cd2e414f1f16f1', 'scooter-1' => 'wwn-0x55cd2e414f1760e2', 'amd-zen3-gpu-sut1-1' => 'wwn-0x500a075133755d4b', 'ix64ph1075' => 'wwn-0x5000c5004f25d745', 'openqaipmi5' => 'wwn-0x5000c5008711f2fc', 'unreal2' => 'wwn-0x55cd2e415081e693', 'unreal3' => 'wwn-0x55cd2e4150817d43', 'blackbauhinia' => 'wwn-0x500a075129424bf7', 'bare-metal1' => 'nvme-eui.35354b3054a009160025384300000002', 'bare-metal2' => 'nvme-eui.35354b3054a008260025384300000002', 'bare-metal3' => 'nvme-eui.35354b3054a008880025384300000002', 'bare-metal5' => 'wwn-0x50026b76838e9fac', 'bare-metal6' => 'wwn-0x50026b76838e9cc4', 'ph052' => 'wwn-0x5000c500e28a91bb', 'ph053' => 'wwn-0x5000c500e28a68d7', 'vh001' => 'wwn-0x50014ee0042a24ed', 'vh012' => 'wwn-0x5000c500b905e133', 'vh013' => 'wwn-0x6d0946606f4e7f0026b540d30c0d64a7', 'vh014' => 'wwn-0x6d0946606f4e620026b62d9505faa64b', 'vh015' => 'wwn-0x50000f0a47804240', 'vh016' => 'wwn-0x50000f0a47803ea0', 'vh017' => 'wwn-0x6f4ee0806affb000b856aefa170fa541', 'vh080' => 'wwn-0x6f4ee08011680e002ae552c4140dfb15', 'vh081' => 'wwn-0x6f4ee0801168bc0029aa28da5a049c94', 'vh082' => 'wwn-0x5002538e117150d5'};
  % my $hostname = (split(/\./, $get_var->("SUT_IP")))[0];
  % my $device_id = defined($wwn->{$hostname}) ? '/dev/disk/by-id/' . $wwn->{$hostname} : ''; 
    <drive>
      <device><%= $device_id %></device>
      <disklabel>gpt</disklabel>
      <enable_snapshots config:type="boolean">false</enable_snapshots>
      <initialize config:type="boolean">true</initialize>
      <partitions config:type="list">
	% if ($check_var->('IPXE_UEFI', '1') or $check_var->('UEFI', '1')) {
        <partition>
          <create config:type="boolean">true</create>
          <filesystem config:type="symbol">vfat</filesystem>
          <format config:type="boolean">true</format>
	  <partition_id t="integer">259</partition_id>
	  <mount>/boot/efi</mount>
          <mountby config:type="symbol">uuid</mountby>
          <size>512M</size>
        </partition>
	% }
        <partition>
          <create config:type="boolean">true</create>
          <create_subvolumes config:type="boolean">true</create_subvolumes>
          <filesystem config:type="symbol">btrfs</filesystem>
          <format config:type="boolean">true</format>
          <mount>/</mount>
          <mountby config:type="symbol">uuid</mountby>
          <partition_id config:type="integer">131</partition_id>
          <size>120G</size>
        </partition>
        <partition>
          <create config:type="boolean">true</create>
          <filesystem config:type="symbol">xfs</filesystem>
          <format config:type="boolean">true</format>
          <mount>/var/lib/libvirt/images/</mount>
          <mountby config:type="symbol">uuid</mountby>
          <partition_id config:type="integer">131</partition_id>
          <resize config:type="boolean">false</resize>
        </partition>
        <partition>
          <create config:type="boolean">true</create>
          <filesystem config:type="symbol">swap</filesystem>
          <format config:type="boolean">true</format>
          <mountby config:type="symbol">uuid</mountby>
          <size>2G</size>
        </partition>
      </partitions>
      <type config:type="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <report>
    <errors>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">0</timeout>
    </errors>
    <messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">10</timeout>
    </messages>
    <warnings>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">10</timeout>
    </warnings>
    <yesno_messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">10</timeout>
    </yesno_messages>
  </report>
  <services-manager>
    <default_target>multi-user</default_target>
    <services>
      <disable config:type="list">
        <service>firewalld</service>
      </disable>
      <enable config:type="list">
        <service>sshd</service>
      </enable>
    </services>
  </services-manager>
  <software>
    <install_recommended config:type="boolean">true</install_recommended>
    <instsource/>
    <packages config:type="list">
      <package>dhcp-client</package>
      <package>guestfs-tools</package>
      <package>nmap</package>
      <package>iputils</package>
      <package>bind-utils</package>
    </packages>
    <products config:type="list">
      <product><%= uc $get_var->('SLE_PRODUCT') %></product>
    </products>
    <patterns config:type="list">
      % my $patterns = $check_var->('SYSTEM_ROLE', 'kvm') ? ['base', 'enhanced_base', 'kvm_server', 'kvm_tools'] : ['base', 'enhanced_base', 'xen_server', 'xen_tools'];
      % for my $pattern (@$patterns) {
      <pattern><%= $pattern %></pattern>
      % }
    </patterns>
  </software>
  <ssh_import>
    <copy_config config:type="boolean">false</copy_config>
    <import config:type="boolean">false</import>
  </ssh_import>
  <timezone>
    <hwclock>UTC</hwclock>
    <timezone>UTC</timezone>
  </timezone>
  <users config:type="list">
    <user>
      <authorized_keys config:type="list"/>
      <encrypted config:type="boolean">true</encrypted>
      <fullname>bernhard</fullname>
      <gid>100</gid>
      <home>/home/bernhard</home>
      <password_settings>
        <expire/>
        <flag/>
        <inact/>
        <max>99999</max>
        <min>0</min>
        <warn>7</warn>
      </password_settings>
      <shell>/bin/bash</shell>
      <uid>1000</uid>
      <user_password>$6$QSJG7nUenDgf$UcRX/Q6YWM2/S55RJ8Mgvu93oKEDlOs.7/rOTMYjjxXQPiZ/rq4ogx5EpkksVRZXoEF0kX8FeEa.gOTxl1l/t0</user_password>
      <username>bernhard</username>
    </user>
    <user>
      <authorized_keys config:type="list"/>
      <encrypted config:type="boolean">true</encrypted>
      <fullname>root</fullname>
      <gid>0</gid>
      <home>/root</home>
      <password_settings>
        <expire/>
        <flag/>
        <inact/>
        <max/>
        <min/>
        <warn/>
      </password_settings>
      <shell>/bin/bash</shell>
      <uid>0</uid>
      <user_password>$6$0bUrc6YvA/qw$h1Z3pzadaxmc/KgcHRSEcYoU1ShVNymoXBaRAQZJ4ozVhTbCvdAMbGQrQAAX7cC9cLRybhsvDio3kBX/IB3xj/</user_password>
      <username>root</username>
    </user>
  </users>
  <scripts>
    <pre-scripts config:type="list">
      <script>
        <filename>pre_erase_all_disks.sh</filename>
        <interpreter>/bin/bash -x</interpreter>
        <source><![CDATA[
disks=$(lsblk -n -l -o NAME -d -e 7,11,254);
for disk in $disks;do
    echo "Wiping /dev/$disk..."
    wipefs -af /dev/$disk
    sync
    parted -s /dev/$disk mklabel gpt
    sync
done
echo "All disks are wiped out."
lsblk
]]>
        </source>
        <feedback config:type="boolean">false</feedback>
        <notification>Please wait while pre-script is running...</notification>
      </script>
    </pre-scripts>
    <chroot-scripts config:type="list">
      <script>
        <!-- Keep ssh connection alive for long-time run test -->
        <chrooted t="boolean">true</chrooted>
        <filename>configure_sshd.sh</filename>
        <interpreter>/bin/bash -x</interpreter>
        <source><![CDATA[
sshd_config_file="/etc/ssh/sshd_config.d/01-virt-test.conf"
echo -e "TCPKeepAlive yes\nClientAliveInterval 60\nClientAliveCountMax 60" > $sshd_config_file
]]>
        </source>
      </script>
    </chroot-scripts>
    <post-scripts config:type="list">
      % if ($check_var->('SYSTEM_ROLE', 'xen') && $check_var->('XEN_DEFAULT_BOOT_IS_SET', 1)) {
      <script>
        <filename>default_xen_boot.sh</filename>
        <interpreter>/bin/bash -x</interpreter>
        <source><![CDATA[
grub2-set-default 2
]]>
        </source>
      </script>
      % }
      % if ($get_var->('VERSION') ge '15-SP6') {
      <script>
	<filename>journal_config.sh</filename>
	<source><![CDATA[
echo -e "[Journal]\\nStorage=persistent" > /etc/systemd/journald.conf.d/01-virt-test.conf
]]>
	</source>
      </script>
      % }
      <script/>
    </post-scripts>
    <init-scripts t="list">
      <!-- configure ssh client -->
      <script>
        <filename>config_ssh.sh</filename>
        <source><![CDATA[
ssh_config_file="/etc/ssh/ssh_config"
if [ ! -f $ssh_config_file ]; then
    echo -e "\StrictHostKeyChecking no\nUserKnownHostsFile /dev/null" > $ssh_config_file
else
    sed -i 's/#\?\([ \t]\+\)\(StrictHostKeyChecking\)\(.\+\)/\1\2 no/' $ssh_config_file
    sed -i 's!#\?\([ \t]\+\)\(UserKnownHostsFile\)\(.\+\)!\1\2 /dev/null!' $ssh_config_file
fi
mkdir -p -m 700 /root/.ssh
# Replace the carrige return with string "CR" in original id_rsa key file
# Note the original key file cannot include "CR"
# Set '_SECRET_RSA_PUB_KEY' to be the one-line string in id_rsa
# Finally id_rsa is restored to be the original key after following commands
cat >> /root/.ssh/id_rsa<< EOF
<%= $get_var->('_SECRET_RSA_PRIV_KEY') %>
EOF
sed -i 's/CR/\n/g' /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
echo <%= $get_var->('_SECRET_RSA_PUB_KEY') %> > /root/.ssh/id_rsa.pub
echo <%= $get_var->('_SECRET_RSA_PUB_KEY') %> >> /root/.ssh/authorized_keys
]]>
        </source>
      </script>
      <script>
        <!-- enable persistent kernel log as per ENABLE_PERSISTENT_KERNEL_LOG -->
        <filename>enable_persistent_kernel_log.sh</filename>
        <source><![CDATA[
% if ($get_var->('ENABLE_PERSISTENT_KERNEL_LOG')) {
    config_file="/etc/rsyslog.conf"
    if [ -f $config_file ];then
        if ! grep -q -e "^\$ModLoad imklog.so$" $config_file;then
            echo "\$ModLoad imklog.so" >> $config_file
        fi
        if ! grep -q -e "^kern.*$" $config_file;then
	    rm -f -r /var/log/kern.log
            echo "kern.*                                  /var/log/kern.log" >> $config_file
        fi		
        echo "Enabled persistent kernel log" > /etc/issue.d/enable_persisten_kernel_log	
        exit 0	    
    else		
        echo "Failed to enable kernel persistent log due to missing $config_file" > /etc/issue.d/enable_persisten_kernel_log	
        exit 1		
    fi
% } else {
    echo "Do not enable persistent kernel log because ENABLE_PERSISTENT_KERNEL_LOG=0" > /etc/issue.d/enable_persisten_kernel_log			
    exit 0		
% }
]]>
        </source>
      </script>
    </init-scripts>
  </scripts>
</profile>
