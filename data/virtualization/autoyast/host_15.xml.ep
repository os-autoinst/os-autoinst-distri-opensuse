<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  % unless ($check_var->('TERADATA', "15-SP4")) {
  <suse_register>
    <do_registration config:type="boolean">true</do_registration>
    <email><%= $get_var->('SCC_EMAIL') %></email>
    <reg_code><%= $get_var->('SCC_REGCODE') %></reg_code>
    <install_updates config:type="boolean">true</install_updates>
    % if (keys %$addons) {
    <addons config:type="list">
      % while (my ($key, $addon) = each (%$addons)) {
      <addon>
        <name><%= $addon->{name} %></name>
        <version><%= $addon->{version} %></version>
        <arch><%= $addon->{arch} %></arch>
        % if ($key eq 'we' and $check_var->('SLE_PRODUCT', 'sles')) {
        <reg_code><%= $get_var->('SCC_REGCODE_WE') %></reg_code>
        % }
        % if ($key eq 'we' and $check_var->('SLE_PRODUCT', 'sled')) {
        <reg_code><%= $get_var->('SCC_REGCODE') %></reg_code>
        % }
        % if ($key eq 'rt') {
        <reg_code><%= $get_var->('SCC_REGCODE_RT') %></reg_code>
        % }
        % if ($key eq 'ltss') {
        <reg_code><%= $get_var->('SCC_REGCODE_LTSS') %></reg_code>
        % }
        <release_type/>
      </addon>
      % }
    </addons>
    %}
  </suse_register>
    % unless ($check_var->('PATCH_WITH_ZYPPER', '1')) {
  <add-on>
    <add_on_products config:type="list">
      % if ($check_var->('VERSION', '15-SP2')) {
      <listentry>
        <media_url>http://updates.nue.suse.com/download/SUSE/Updates/SLE-Product-SLES/15-SP2-LTSS-TERADATA/x86_64/update/</media_url>
	<alias>SLES15-SP2-LTSS-TERADATA</alias>
      </listentry>
      % }
      % my $n =0;
      % for my $repo (@$repos) {
      <listentry>
        <media_url><%= $repo %></media_url>
        <alias>TEST_<%= $n++ %></alias>
      </listentry>
      % }
    </add_on_products>
  </add-on>
      % }
  % } else {
  <add-on>
     <add_on_products config:type="list">
     % unless ($check_var->('PATCH_WITH_ZYPPER', '1')) {
       % my $n =0;
       % for my $repo (@$repos) {
       <listentry>
         <media_url><%= $repo %></media_url>
         <alias>TEST_<%= $n++ %></alias>
       </listentry>
       % }
      % }
       <listentry>
         <media_url>http://download.suse.de/ibs/SUSE/Products/SLE-Module-Server-Applications/15-SP4/x86_64/product/</media_url>
         <product>sle-module-server-applications</product>
         <product_dir/>
       </listentry>
       <listentry>
         <media_url>http://download.suse.de/ibs/SUSE/Products/SLE-Module-Basesystem/15-SP4/x86_64/product/</media_url>
         <product>sle-module-basesystem</product>
         <product_dir/>
       </listentry>
       <listentry>
         <media_url>http://download.suse.de/ibs/SUSE/Products/SLE-Module-Development-Tools/15-SP4/x86_64/product/</media_url>
         <product>sle-module-development-tools</product>
         <product_dir/>
       </listentry>
       <listentry>
         <media_url>http://download.suse.de/ibs/SUSE/Products/SLE-Module-Desktop-Applications/15-SP4/x86_64/product/</media_url>
         <product>sle-module-desktop-applications</product>
         <product_dir/>
       </listentry>
       <listentry>
         <media_url>http://download.suse.de/ibs/SUSE/Updates/SLE-Product-SLES/15-SP4-TERADATA/x86_64/update/</media_url>
         <alias>15-SP4-TERADATA</alias>
         <product_dir/>
       </listentry>
     </add_on_products>
   </add-on>
   % }
  <bootloader>
    <global>
      <activate>true</activate>
      <gfxmode>auto</gfxmode>
      <hiddenmenu>false</hiddenmenu>
      <os_prober>false</os_prober>
      <serial>serial --speed=115200 --unit=<%= $get_var->('SERIALDEV') =~ s/ttyS//r %> --word=8 --parity=no --stop=1</serial>
      <timeout config:type="integer">10</timeout>
      <trusted_grub>false</trusted_grub>
      <terminal>console</terminal>
      % if ($check_var->('SYSTEM_ROLE', 'xen')) {
      <xen_append>splash=silent quiet console=<%= $get_var->('SERIALDEV') %>,115200</xen_append>
      <xen_kernel_append><%= $check_var->('IPMI_HW', 'AMD') ? "" : "dom0_max_vcpus=4 dom0_mem=8192M,max:8192M" %> vga=gfx-1024x768x16 loglvl=all guest_loglvl=all</xen_kernel_append>
      % } else {
      <append>splash=silent <%= $check_var->('IPMI_HW', 'AMD') ? "" : "intel_iommu=on" %></append>
      % }
    </global>
    <loader_type>grub2</loader_type>
  </bootloader>
  <general>
    <ask-list config:type="list"/>
    <mode>
      <confirm config:type="boolean">false</confirm>
      % if ($get_var->('VERSION') gt '15-SP2') {
      <final_reboot config:type="boolean">true</final_reboot>
      % }
    </mode>
    <proposals config:type="list"/>
    <signature-handling>
      <accept_file_without_checksum config:type="boolean">true</accept_file_without_checksum>
      <accept_non_trusted_gpg_key config:type="boolean">true</accept_non_trusted_gpg_key>
      <accept_unknown_gpg_key config:type="boolean">true</accept_unknown_gpg_key>
      <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
      <accept_verification_failed config:type="boolean">true</accept_verification_failed>
      <import_gpg_key config:type="boolean">true</import_gpg_key>
    </signature-handling>
    <storage>
      <start_multipath config:type="boolean">false</start_multipath>
    </storage>
  </general>
  <kdump>
    <add_crash_kernel config:type="boolean">true</add_crash_kernel>
    <crash_kernel>201M,high</crash_kernel>
    <crash_xen_kernel>201M\&lt;4G</crash_xen_kernel>
  </kdump>
  <keyboard>
    <keymap>english-us</keymap>
  </keyboard>
  <language>
    <language>en_US</language>
    <languages/>
  </language>
  <login_settings/>
  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
<interfaces config:type="list">
  <interface>
    <device>br0</device>
    <bootproto>dhcp</bootproto>
    <bridge>yes</bridge>
    <bridge_forwarddelay>0</bridge_forwarddelay>
    <bridge_ports>eth0 eth1</bridge_ports>
    <bridge_stp>off</bridge_stp>
    <startmode>auto</startmode>
  </interface>
</interfaces>
  </networking>
  <ntp-client>
    <ntp_policy>auto</ntp_policy>
    <ntp_servers config:type="list">
      <ntp_server>
        <address>europe.pool.ntp.org</address>
        <iburst config:type="boolean">true</iburst>
        <offline config:type="boolean">false</offline>
      </ntp_server>
    </ntp_servers>
    <ntp_sync>systemd</ntp_sync>
  </ntp-client>
  <partitioning config:type="list">
    <drive>
  % my $wwn = {lipa => 'wwn-0x5002538c4002f8bd', briza => 'wwn-0x5000c5004f0e566d', pegasus => 'wwn-0x5002538c4002f8be', galactica => 'wwn-0x5002538c4002f8cd'};
  % my $hostname = (split(/\./, $get_var->("SUT_IP")))[0];
  % my $device_id = defined($wwn->{$hostname}) ? '/dev/disk/by-id/' . $wwn->{$hostname} : '';
      <device><%= $device_id %></device>
      <disklabel>gpt</disklabel>
      <enable_snapshots config:type="boolean">false</enable_snapshots>
      <initialize config:type="boolean">true</initialize>
      <partitions config:type="list">
        <partition>
          <create config:type="boolean">true</create>
          <create_subvolumes config:type="boolean">true</create_subvolumes>
          <filesystem config:type="symbol">btrfs</filesystem>
          <format config:type="boolean">true</format>
          <mount>/</mount>
          <mountby config:type="symbol">uuid</mountby>
          <partition_id config:type="integer">131</partition_id>
          <partition_nr config:type="integer">1</partition_nr>
          <resize config:type="boolean">false</resize>
          <size>400G</size>
        </partition>
        <partition/>
      </partitions>
      <type config:type="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <report>
    <errors>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">0</timeout>
    </errors>
    <messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">10</timeout>
    </messages>
    <warnings>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">10</timeout>
    </warnings>
    <yesno_messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">10</timeout>
    </yesno_messages>
  </report>
  <services-manager>
    <default_target>multi-user</default_target>
    <services>
      <disable config:type="list">
        <service>firewalld</service>
      </disable>
      <enable config:type="list">
        <service>sshd</service>
      </enable>
    </services>
  </services-manager>
  <software>
    <install_recommended config:type="boolean">true</install_recommended>
    <instsource/>
    <packages config:type="list">
      <package>dhcp-client</package>
      <package>nmap</package>
      <package>guestfs-tools</package>
      % if ($get_var->('VERSION') gt '15-SP5') {
      <package>libvirt-daemon-proxy</package>
      % }
    </packages>
    <products config:type="list">
      <product><%= uc $get_var->('SLE_PRODUCT') %></product>
    </products>
    <patterns config:type="list">
      % for my $pattern (@$patterns) {
      <pattern><%= $pattern %></pattern>
      % }
    </patterns>
  </software>
  <ssh_import>
    <copy_config config:type="boolean">false</copy_config>
    <import config:type="boolean">false</import>
  </ssh_import>
  <timezone>
    <hwclock>UTC</hwclock>
    <timezone>UTC</timezone>
  </timezone>
  <users config:type="list">
    <user>
      <authorized_keys config:type="list"/>
      <encrypted config:type="boolean">true</encrypted>
      <fullname>bernhard</fullname>
      <gid>100</gid>
      <home>/home/bernhard</home>
      <password_settings>
        <expire/>
        <flag/>
        <inact/>
        <max>99999</max>
        <min>0</min>
        <warn>7</warn>
      </password_settings>
      <shell>/bin/bash</shell>
      <uid>1000</uid>
      <user_password>$6$QSJG7nUenDgf$UcRX/Q6YWM2/S55RJ8Mgvu93oKEDlOs.7/rOTMYjjxXQPiZ/rq4ogx5EpkksVRZXoEF0kX8FeEa.gOTxl1l/t0</user_password>
      <username>bernhard</username>
    </user>
    <user>
      <authorized_keys config:type="list"/>
      <encrypted config:type="boolean">true</encrypted>
      <fullname>root</fullname>
      <gid>0</gid>
      <home>/root</home>
      <password_settings>
        <expire/>
        <flag/>
        <inact/>
        <max/>
        <min/>
        <warn/>
      </password_settings>
      <shell>/bin/bash</shell>
      <uid>0</uid>
      <user_password>$6$0bUrc6YvA/qw$h1Z3pzadaxmc/KgcHRSEcYoU1ShVNymoXBaRAQZJ4ozVhTbCvdAMbGQrQAAX7cC9cLRybhsvDio3kBX/IB3xj/</user_password>
      <username>root</username>
    </user>
  </users>
  <scripts>
    <pre-scripts config:type="list">
      <script>
        <filename>pre_erase_all_disks.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[
#!/bin/sh
disks=$(lsblk -n -l -o NAME -d -e 7,11,254);
for disk in $disks;do
    echo "Wiping /dev/$disk..."
    wipefs -af /dev/$disk
    sync
    parted -s /dev/$disk mklabel gpt
    sync
done
echo "All disks are wiped out."
lsblk
]]>
        </source>
        <feedback config:type="boolean">false</feedback>
        <notification>Please wait while pre-script is running...</notification>
      </script>
    </pre-scripts>
    <post-scripts config:type="list">
      % if ($check_var->('SYSTEM_ROLE', 'xen') && $get_var->('VERSION') gt '15-SP5') {
      <script>
        <filename>configure_xen_modular_libvirt_log.sh</filename>
        <source><![CDATA[
for drv in xen network nodedev nwfilter secret storage proxy lock
do
cat >> "/etc/libvirt/virt${drv}d.conf" << EOF
log_level = 1
log_filters="1:qemu 1:libxl 1:libvirt 4:object 4:json 4:event 3:util 1:util.pci"
log_outputs="1:file:/var/log/libvirt/virt${drv}d.log"
EOF
done
]]>
        </source>
      </script>
      % }
      % if ($check_var->('SYSTEM_ROLE', 'kvm') && $get_var->('VERSION') gt '15-SP5') {
      <script>
        <filename>configure_kvm_modular_libvirt_log.sh</filename>
        <source><![CDATA[
for drv in qemu log network nodedev nwfilter secret storage proxy lock 
do
cat >> "/etc/libvirt/virt${drv}d.conf" << EOF
log_level = 1
log_filters="1:qemu 1:libxl 1:libvirt 4:object 4:json 4:event 3:util 1:util.pci"
log_outputs="1:file:/var/log/libvirt/virt${drv}d.log"
EOF
done
]]>
        </source>
      </script>
      % }
      % if ($get_var->('VERSION') lt '15-SP6') {
      <script>
        <filename>configure_monolithic_libvirt_log.sh</filename>
        <source><![CDATA[
cat >> "/etc/libvirt/libvirtd.conf" << EOF
log_level = 1
log_filters="1:qemu 1:libxl 1:libvirt 4:object 4:json 4:event 3:util 1:util.pci"
log_outputs="1:file:/var/log/libvirt/libvirtd.log"
EOF
]]>
        </source>
      </script>
      % }
      <script>
        <filename>config_setup.sh</filename>
        <source><![CDATA[
cp /usr/lib/systemd/network/99-default.link  /etc/systemd/network/99-default.link
sed -i s/MACAddressPolicy=persistent/MACAddressPolicy=none/ /etc/systemd/network/99-default.link

mkdir -p /root/.config/fontconfig
cat >> /root/.config/fontconfig/fonts.conf <<EOF
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <alias>
    <family>sans-serif</family>
    <prefer>
      <family>Cantarell</family>
    </prefer>
  </alias>
</fontconfig>
EOF
]]>
        </source>
      </script>
      <script>
        <filename>config_ssh.sh</filename>
        <source><![CDATA[
mkdir -p -m 700 /root/.ssh
cat >> /root/.ssh/id_rsa<< EOF
<%= $get_var->('_SECRET_RSA_PRIV_KEY') %>
EOF
sed -i 's/9A/\n/g' /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
echo <%= $get_var->('_SECRET_RSA_PUB_KEY') %> > /root/.ssh/id_rsa.pub

cat >> /root/.ssh/config << EOF
StrictHostKeyChecking no
HostKeyAlgorithms ssh-rsa,ssh-ed25519
PreferredAuthentications publickey
#ControlMaster auto
#ControlPersist 86400
#ControlPath ~/.ssh/ssh_%r_%h_%p
EOF
cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys
chmod 600 /root/.ssh/id_rsa /root/.ssh/authorized_keys /root/.ssh/config
]]>
        </source>
      </script>
    % if ($check_var->('VERSION', '15')) {
      <script>
        <filename>disable_dom0_balloon.sh</filename>
        <source><![CDATA[
if [ -e /etc/xen/xl.conf ]; then sed -i '/autoballoon=/ s/.*/autoballoon="off"/' /etc/xen/xl.conf; fi
]]>
        </source>
      </script>
   % }
    % if ($check_var->('VERSION', '15-SP4') && $check_var->('IPMI_HW', 'AMD') && $check_var->('SYSTEM_ROLE', 'xen')) {
      <script>
        <filename>workround_ip_forward_amd.sh</filename>
        <source><![CDATA[
		echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
]]>
        </source>
      </script>
   % }
    % if ($check_var->('XEN_DEFAULT_BOOT_IS_SET', '1')) {
      <script>
        <filename>workround_default_grub_xen.sh</filename>
        <source><![CDATA[
    defautl_grub_name=`/usr/bin/grep ^menuentry /boot/grub2/grub.cfg | /usr/bin/cut -d "'" -f2 | /usr/bin/grep "Xen hypervisor"`
    /usr/sbin/grub2-set-default "$defautl_grub_name"
    /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
]]>
        </source>
      </script>
   % }
    </post-scripts>
  </scripts>
</profile>
